package com.xiaosw.library.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaosw.library.bean.SlideInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_slide_one".
*/
public class SlideInfoDao extends AbstractDao<SlideInfo, Long> {

    public static final String TABLENAME = "tb_slide_one";

    /**
     * Properties of entity SlideInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property DateAdded = new Property(2, long.class, "dateAdded", false, "date_added");
        public final static Property DateModified = new Property(3, long.class, "dateModified", false, "date_modified");
        public final static Property Datetaken = new Property(4, long.class, "datetaken", false, "datetaken");
        public final static Property Description = new Property(5, String.class, "description", false, "description");
        public final static Property Data0 = new Property(6, String.class, "data0", false, "data_0");
        public final static Property Data1 = new Property(7, String.class, "data1", false, "data_1");
        public final static Property Data2 = new Property(8, String.class, "data2", false, "data_2");
        public final static Property Data3 = new Property(9, String.class, "data3", false, "data_3");
        public final static Property Data4 = new Property(10, String.class, "data4", false, "data_4");
        public final static Property Data5 = new Property(11, String.class, "data5", false, "data_5");
        public final static Property Data6 = new Property(12, String.class, "data6", false, "data_6");
        public final static Property Data7 = new Property(13, String.class, "data7", false, "data_7");
    }

    private DaoSession daoSession;


    public SlideInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SlideInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_slide_one\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"title\" TEXT," + // 1: title
                "\"date_added\" INTEGER NOT NULL ," + // 2: dateAdded
                "\"date_modified\" INTEGER NOT NULL ," + // 3: dateModified
                "\"datetaken\" INTEGER NOT NULL ," + // 4: datetaken
                "\"description\" TEXT," + // 5: description
                "\"data_0\" TEXT," + // 6: data0
                "\"data_1\" TEXT," + // 7: data1
                "\"data_2\" TEXT," + // 8: data2
                "\"data_3\" TEXT," + // 9: data3
                "\"data_4\" TEXT," + // 10: data4
                "\"data_5\" TEXT," + // 11: data5
                "\"data_6\" TEXT," + // 12: data6
                "\"data_7\" TEXT);"); // 13: data7
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_slide_one\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SlideInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getDateAdded());
        stmt.bindLong(4, entity.getDateModified());
        stmt.bindLong(5, entity.getDatetaken());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String data0 = entity.getData0();
        if (data0 != null) {
            stmt.bindString(7, data0);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(8, data1);
        }
 
        String data2 = entity.getData2();
        if (data2 != null) {
            stmt.bindString(9, data2);
        }
 
        String data3 = entity.getData3();
        if (data3 != null) {
            stmt.bindString(10, data3);
        }
 
        String data4 = entity.getData4();
        if (data4 != null) {
            stmt.bindString(11, data4);
        }
 
        String data5 = entity.getData5();
        if (data5 != null) {
            stmt.bindString(12, data5);
        }
 
        String data6 = entity.getData6();
        if (data6 != null) {
            stmt.bindString(13, data6);
        }
 
        String data7 = entity.getData7();
        if (data7 != null) {
            stmt.bindString(14, data7);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SlideInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getDateAdded());
        stmt.bindLong(4, entity.getDateModified());
        stmt.bindLong(5, entity.getDatetaken());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String data0 = entity.getData0();
        if (data0 != null) {
            stmt.bindString(7, data0);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(8, data1);
        }
 
        String data2 = entity.getData2();
        if (data2 != null) {
            stmt.bindString(9, data2);
        }
 
        String data3 = entity.getData3();
        if (data3 != null) {
            stmt.bindString(10, data3);
        }
 
        String data4 = entity.getData4();
        if (data4 != null) {
            stmt.bindString(11, data4);
        }
 
        String data5 = entity.getData5();
        if (data5 != null) {
            stmt.bindString(12, data5);
        }
 
        String data6 = entity.getData6();
        if (data6 != null) {
            stmt.bindString(13, data6);
        }
 
        String data7 = entity.getData7();
        if (data7 != null) {
            stmt.bindString(14, data7);
        }
    }

    @Override
    protected final void attachEntity(SlideInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SlideInfo readEntity(Cursor cursor, int offset) {
        SlideInfo entity = new SlideInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getLong(offset + 2), // dateAdded
            cursor.getLong(offset + 3), // dateModified
            cursor.getLong(offset + 4), // datetaken
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // data0
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // data1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // data2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // data3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // data4
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // data5
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // data6
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // data7
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SlideInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateAdded(cursor.getLong(offset + 2));
        entity.setDateModified(cursor.getLong(offset + 3));
        entity.setDatetaken(cursor.getLong(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setData0(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setData1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setData2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setData3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setData4(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setData5(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setData6(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setData7(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SlideInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SlideInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SlideInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
